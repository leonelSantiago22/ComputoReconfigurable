// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/08/2022 11:49:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          alu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] AluOp;
reg [7:0] operador1;
reg [7:0] operador2;
// wires                                               
wire [7:0] ALURESULT;
wire zero;

// assign statements (if any)                          
alu i1 (
// port map - connection between master ports and signals/registers   
	.ALURESULT(ALURESULT),
	.AluOp(AluOp),
	.operador1(operador1),
	.operador2(operador2),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 
// AluOp[ 2 ]
initial
begin
	repeat(2)
	begin
		AluOp[2] = 1'b0;
		AluOp[2] = #200000 1'b1;
		# 200000;
	end
	AluOp[2] = 1'b0;
end 
// AluOp[ 1 ]
always
begin
	AluOp[1] = 1'b0;
	AluOp[1] = #100000 1'b1;
	#100000;
end 
// AluOp[ 0 ]
always
begin
	AluOp[0] = 1'b0;
	AluOp[0] = #50000 1'b1;
	#50000;
end 
// operador1[ 7 ]
initial
begin
	operador1[7] = 1'b0;
	operador1[7] = #100000 1'b1;
	operador1[7] = #200000 1'b0;
	operador1[7] = #150000 1'b1;
	operador1[7] = #150000 1'b0;
	operador1[7] = #250000 1'b1;
	operador1[7] = #50000 1'b0;
end 
// operador1[ 6 ]
initial
begin
	operador1[6] = 1'b0;
	operador1[6] = #100000 1'b1;
	operador1[6] = #100000 1'b0;
	operador1[6] = #100000 1'b1;
	operador1[6] = #100000 1'b0;
	operador1[6] = #100000 1'b1;
	operador1[6] = #50000 1'b0;
	operador1[6] = #150000 1'b1;
	operador1[6] = #50000 1'b0;
	operador1[6] = #50000 1'b1;
	operador1[6] = #50000 1'b0;
	operador1[6] = #50000 1'b1;
	operador1[6] = #50000 1'b0;
end 
// operador1[ 5 ]
initial
begin
	operador1[5] = 1'b0;
	operador1[5] = #150000 1'b1;
	operador1[5] = #200000 1'b0;
	operador1[5] = #50000 1'b1;
	operador1[5] = #150000 1'b0;
	operador1[5] = #100000 1'b1;
	operador1[5] = #50000 1'b0;
	operador1[5] = #250000 1'b1;
end 
// operador1[ 4 ]
initial
begin
	operador1[4] = 1'b1;
	operador1[4] = #50000 1'b0;
	operador1[4] = #50000 1'b1;
	operador1[4] = #100000 1'b0;
	operador1[4] = #50000 1'b1;
	operador1[4] = #100000 1'b0;
	operador1[4] = #50000 1'b1;
	operador1[4] = #50000 1'b0;
	operador1[4] = #50000 1'b1;
	operador1[4] = #150000 1'b0;
	operador1[4] = #50000 1'b1;
end 
// operador1[ 3 ]
initial
begin
	operador1[3] = 1'b1;
	operador1[3] = #100000 1'b0;
	operador1[3] = #50000 1'b1;
	operador1[3] = #150000 1'b0;
	operador1[3] = #100000 1'b1;
	operador1[3] = #50000 1'b0;
	operador1[3] = #350000 1'b1;
	operador1[3] = #50000 1'b0;
	operador1[3] = #50000 1'b1;
	operador1[3] = #50000 1'b0;
end 
// operador1[ 2 ]
initial
begin
	operador1[2] = 1'b0;
	operador1[2] = #250000 1'b1;
	operador1[2] = #50000 1'b0;
	operador1[2] = #150000 1'b1;
	operador1[2] = #50000 1'b0;
	operador1[2] = #50000 1'b1;
	operador1[2] = #200000 1'b0;
end 
// operador1[ 1 ]
initial
begin
	operador1[1] = 1'b1;
	operador1[1] = #50000 1'b0;
	operador1[1] = #100000 1'b1;
	operador1[1] = #50000 1'b0;
	operador1[1] = #250000 1'b1;
	operador1[1] = #50000 1'b0;
	operador1[1] = #50000 1'b1;
	operador1[1] = #50000 1'b0;
	operador1[1] = #100000 1'b1;
	operador1[1] = #100000 1'b0;
end 
// operador1[ 0 ]
initial
begin
	operador1[0] = 1'b1;
	operador1[0] = #50000 1'b0;
	operador1[0] = #100000 1'b1;
	operador1[0] = #200000 1'b0;
	operador1[0] = #100000 1'b1;
	operador1[0] = #50000 1'b0;
	operador1[0] = #50000 1'b1;
	operador1[0] = #50000 1'b0;
	operador1[0] = #150000 1'b1;
	operador1[0] = #50000 1'b0;
end 
// operador2[ 7 ]
initial
begin
	operador2[7] = 1'b0;
	operador2[7] = #200000 1'b1;
	operador2[7] = #100000 1'b0;
	operador2[7] = #50000 1'b1;
	operador2[7] = #200000 1'b0;
	operador2[7] = #50000 1'b1;
	operador2[7] = #50000 1'b0;
	operador2[7] = #50000 1'b1;
	operador2[7] = #100000 1'b0;
	operador2[7] = #150000 1'b1;
end 
// operador2[ 6 ]
initial
begin
	operador2[6] = 1'b0;
	operador2[6] = #150000 1'b1;
	operador2[6] = #50000 1'b0;
	operador2[6] = #50000 1'b1;
	operador2[6] = #50000 1'b0;
	operador2[6] = #50000 1'b1;
	operador2[6] = #350000 1'b0;
	operador2[6] = #50000 1'b1;
	operador2[6] = #50000 1'b0;
	operador2[6] = #50000 1'b1;
end 
// operador2[ 5 ]
initial
begin
	operador2[5] = 1'b1;
	operador2[5] = #50000 1'b0;
	operador2[5] = #200000 1'b1;
	operador2[5] = #150000 1'b0;
	operador2[5] = #100000 1'b1;
	operador2[5] = #50000 1'b0;
	operador2[5] = #100000 1'b1;
	operador2[5] = #50000 1'b0;
	operador2[5] = #100000 1'b1;
	operador2[5] = #150000 1'b0;
end 
// operador2[ 4 ]
initial
begin
	operador2[4] = 1'b1;
	operador2[4] = #150000 1'b0;
	operador2[4] = #50000 1'b1;
	operador2[4] = #50000 1'b0;
	operador2[4] = #100000 1'b1;
	operador2[4] = #50000 1'b0;
	operador2[4] = #250000 1'b1;
	operador2[4] = #100000 1'b0;
	operador2[4] = #150000 1'b1;
end 
// operador2[ 3 ]
initial
begin
	operador2[3] = 1'b1;
	operador2[3] = #50000 1'b0;
	operador2[3] = #50000 1'b1;
	operador2[3] = #50000 1'b0;
	operador2[3] = #100000 1'b1;
	operador2[3] = #50000 1'b0;
	operador2[3] = #100000 1'b1;
	operador2[3] = #200000 1'b0;
	operador2[3] = #50000 1'b1;
	operador2[3] = #50000 1'b0;
	operador2[3] = #50000 1'b1;
	operador2[3] = #200000 1'b0;
end 
// operador2[ 2 ]
initial
begin
	operador2[2] = 1'b0;
	operador2[2] = #50000 1'b1;
	operador2[2] = #100000 1'b0;
	operador2[2] = #50000 1'b1;
	operador2[2] = #150000 1'b0;
	operador2[2] = #200000 1'b1;
	operador2[2] = #150000 1'b0;
	operador2[2] = #50000 1'b1;
	operador2[2] = #50000 1'b0;
	operador2[2] = #50000 1'b1;
	operador2[2] = #50000 1'b0;
end 
// operador2[ 1 ]
initial
begin
	operador2[1] = 1'b1;
	operador2[1] = #50000 1'b0;
	operador2[1] = #50000 1'b1;
	operador2[1] = #50000 1'b0;
	operador2[1] = #150000 1'b1;
	operador2[1] = #250000 1'b0;
	operador2[1] = #50000 1'b1;
	operador2[1] = #50000 1'b0;
	operador2[1] = #50000 1'b1;
	operador2[1] = #100000 1'b0;
	operador2[1] = #50000 1'b1;
	operador2[1] = #50000 1'b0;
	operador2[1] = #50000 1'b1;
end 
// operador2[ 0 ]
initial
begin
	operador2[0] = 1'b1;
	operador2[0] = #150000 1'b0;
	operador2[0] = #150000 1'b1;
	operador2[0] = #250000 1'b0;
	operador2[0] = #50000 1'b1;
	operador2[0] = #50000 1'b0;
	operador2[0] = #150000 1'b1;
	operador2[0] = #50000 1'b0;
	operador2[0] = #100000 1'b1;
end 
endmodule


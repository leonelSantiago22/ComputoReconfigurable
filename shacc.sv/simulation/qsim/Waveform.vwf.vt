// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/31/2022 11:12:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          shacc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module shacc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] in_acc;
reg [15:0] in_sh1;
reg [15:0] in_sh2;
// wires                                               
wire [15:0] out_acc;
wire [15:0] out_sh1;
wire [15:0] out_sh2;

// assign statements (if any)                          
shacc i1 (
// port map - connection between master ports and signals/registers   
	.in_acc(in_acc),
	.in_sh1(in_sh1),
	.in_sh2(in_sh2),
	.out_acc(out_acc),
	.out_sh1(out_sh1),
	.out_sh2(out_sh2)
);
initial 
begin 
#1000000 $finish;
end 
// in_acc[ 15 ]
initial
begin
	in_acc[15] = 1'b0;
end 
// in_acc[ 14 ]
initial
begin
	in_acc[14] = 1'b0;
end 
// in_acc[ 13 ]
initial
begin
	in_acc[13] = 1'b0;
end 
// in_acc[ 12 ]
initial
begin
	in_acc[12] = 1'b0;
end 
// in_acc[ 11 ]
initial
begin
	in_acc[11] = 1'b0;
end 
// in_acc[ 10 ]
initial
begin
	in_acc[10] = 1'b0;
end 
// in_acc[ 9 ]
initial
begin
	in_acc[9] = 1'b0;
end 
// in_acc[ 8 ]
initial
begin
	in_acc[8] = 1'b0;
end 
// in_acc[ 7 ]
initial
begin
	in_acc[7] = 1'b0;
end 
// in_acc[ 6 ]
initial
begin
	in_acc[6] = 1'b0;
end 
// in_acc[ 5 ]
initial
begin
	in_acc[5] = 1'b0;
end 
// in_acc[ 4 ]
initial
begin
	in_acc[4] = 1'b0;
end 
// in_acc[ 3 ]
initial
begin
	in_acc[3] = 1'b0;
end 
// in_acc[ 2 ]
initial
begin
	in_acc[2] = 1'b1;
end 
// in_acc[ 1 ]
initial
begin
	in_acc[1] = 1'b0;
end 
// in_acc[ 0 ]
initial
begin
	in_acc[0] = 1'b0;
end 
// in_sh1[ 15 ]
initial
begin
	in_sh1[15] = 1'b0;
end 
// in_sh1[ 14 ]
initial
begin
	in_sh1[14] = 1'b0;
end 
// in_sh1[ 13 ]
initial
begin
	in_sh1[13] = 1'b0;
end 
// in_sh1[ 12 ]
initial
begin
	in_sh1[12] = 1'b0;
end 
// in_sh1[ 11 ]
initial
begin
	in_sh1[11] = 1'b0;
end 
// in_sh1[ 10 ]
initial
begin
	in_sh1[10] = 1'b0;
end 
// in_sh1[ 9 ]
initial
begin
	in_sh1[9] = 1'b0;
end 
// in_sh1[ 8 ]
initial
begin
	in_sh1[8] = 1'b0;
end 
// in_sh1[ 7 ]
initial
begin
	in_sh1[7] = 1'b0;
end 
// in_sh1[ 6 ]
initial
begin
	in_sh1[6] = 1'b0;
end 
// in_sh1[ 5 ]
initial
begin
	in_sh1[5] = 1'b0;
end 
// in_sh1[ 4 ]
initial
begin
	in_sh1[4] = 1'b0;
end 
// in_sh1[ 3 ]
initial
begin
	in_sh1[3] = 1'b0;
end 
// in_sh1[ 2 ]
initial
begin
	in_sh1[2] = 1'b1;
end 
// in_sh1[ 1 ]
initial
begin
	in_sh1[1] = 1'b0;
end 
// in_sh1[ 0 ]
initial
begin
	in_sh1[0] = 1'b0;
end 
// in_sh2[ 15 ]
initial
begin
	in_sh2[15] = 1'b0;
end 
// in_sh2[ 14 ]
initial
begin
	in_sh2[14] = 1'b0;
end 
// in_sh2[ 13 ]
initial
begin
	in_sh2[13] = 1'b0;
end 
// in_sh2[ 12 ]
initial
begin
	in_sh2[12] = 1'b0;
end 
// in_sh2[ 11 ]
initial
begin
	in_sh2[11] = 1'b0;
end 
// in_sh2[ 10 ]
initial
begin
	in_sh2[10] = 1'b0;
end 
// in_sh2[ 9 ]
initial
begin
	in_sh2[9] = 1'b0;
end 
// in_sh2[ 8 ]
initial
begin
	in_sh2[8] = 1'b0;
end 
// in_sh2[ 7 ]
initial
begin
	in_sh2[7] = 1'b0;
end 
// in_sh2[ 6 ]
initial
begin
	in_sh2[6] = 1'b0;
end 
// in_sh2[ 5 ]
initial
begin
	in_sh2[5] = 1'b0;
end 
// in_sh2[ 4 ]
initial
begin
	in_sh2[4] = 1'b0;
end 
// in_sh2[ 3 ]
initial
begin
	in_sh2[3] = 1'b0;
end 
// in_sh2[ 2 ]
initial
begin
	in_sh2[2] = 1'b1;
end 
// in_sh2[ 1 ]
initial
begin
	in_sh2[1] = 1'b0;
end 
// in_sh2[ 0 ]
initial
begin
	in_sh2[0] = 1'b1;
end 
endmodule


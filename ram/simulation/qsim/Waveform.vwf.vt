// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/10/2022 11:50:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ram
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ram_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] adr;
reg clk;
reg [31:0] din;
reg we;
// wires                                               
wire [31:0] dout;

// assign statements (if any)                          
ram i1 (
// port map - connection between master ports and signals/registers   
	.adr(adr),
	.clk(clk),
	.din(din),
	.dout(dout),
	.we(we)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// we
initial
begin
	we = 1'b1;
	we = #30000 1'b0;
	we = #20000 1'b1;
	we = #30000 1'b0;
	we = #130000 1'b1;
	we = #40000 1'b0;
	we = #130000 1'b1;
end 
// adr[ 5 ]
initial
begin
	adr[5] = 1'b0;
end 
// adr[ 4 ]
initial
begin
	adr[4] = 1'b0;
end 
// adr[ 3 ]
initial
begin
	adr[3] = 1'b0;
end 
// adr[ 2 ]
initial
begin
	adr[2] = 1'b0;
end 
// adr[ 1 ]
initial
begin
	adr[1] = 1'b0;
end 
// adr[ 0 ]
initial
begin
	adr[0] = 1'b0;
end 
// din[ 31 ]
initial
begin
	din[31] = 1'b0;
	din[31] = #400000 1'b1;
	din[31] = #200000 1'b0;
	din[31] = #200000 1'b1;
end 
// din[ 30 ]
initial
begin
	din[30] = 1'b1;
	din[30] = #400000 1'b0;
	din[30] = #400000 1'b1;
end 
// din[ 29 ]
initial
begin
	din[29] = 1'b0;
	din[29] = #200000 1'b1;
	din[29] = #200000 1'b0;
end 
// din[ 28 ]
initial
begin
	din[28] = 1'b1;
	din[28] = #400000 1'b0;
	din[28] = #200000 1'b1;
end 
// din[ 27 ]
initial
begin
	din[27] = 1'b1;
end 
// din[ 26 ]
initial
begin
	din[26] = 1'b0;
	din[26] = #200000 1'b1;
	din[26] = #200000 1'b0;
	din[26] = #400000 1'b1;
end 
// din[ 25 ]
initial
begin
	din[25] = 1'b0;
	din[25] = #200000 1'b1;
	din[25] = #200000 1'b0;
end 
// din[ 24 ]
initial
begin
	din[24] = 1'b1;
	din[24] = #600000 1'b0;
	din[24] = #200000 1'b1;
end 
// din[ 23 ]
initial
begin
	din[23] = 1'b0;
	din[23] = #200000 1'b1;
	din[23] = #200000 1'b0;
end 
// din[ 22 ]
initial
begin
	din[22] = 1'b0;
	din[22] = #200000 1'b1;
	din[22] = #200000 1'b0;
	din[22] = #200000 1'b1;
end 
// din[ 21 ]
initial
begin
	din[21] = 1'b1;
	din[21] = #200000 1'b0;
	din[21] = #200000 1'b1;
end 
// din[ 20 ]
initial
begin
	din[20] = 1'b0;
	din[20] = #200000 1'b1;
	din[20] = #400000 1'b0;
	din[20] = #200000 1'b1;
end 
// din[ 19 ]
initial
begin
	din[19] = 1'b1;
	din[19] = #200000 1'b0;
	din[19] = #200000 1'b1;
	din[19] = #200000 1'b0;
end 
// din[ 18 ]
initial
begin
	din[18] = 1'b1;
end 
// din[ 17 ]
initial
begin
	din[17] = 1'b1;
	din[17] = #800000 1'b0;
end 
// din[ 16 ]
initial
begin
	din[16] = 1'b1;
	din[16] = #200000 1'b0;
end 
// din[ 15 ]
initial
begin
	din[15] = 1'b1;
	din[15] = #400000 1'b0;
	din[15] = #200000 1'b1;
end 
// din[ 14 ]
initial
begin
	din[14] = 1'b0;
	din[14] = #200000 1'b1;
	din[14] = #200000 1'b0;
	din[14] = #200000 1'b1;
	din[14] = #200000 1'b0;
end 
// din[ 13 ]
initial
begin
	din[13] = 1'b0;
end 
// din[ 12 ]
initial
begin
	din[12] = 1'b1;
	din[12] = #800000 1'b0;
end 
// din[ 11 ]
initial
begin
	din[11] = 1'b1;
	din[11] = #800000 1'b0;
end 
// din[ 10 ]
initial
begin
	din[10] = 1'b1;
	din[10] = #600000 1'b0;
end 
// din[ 9 ]
initial
begin
	din[9] = 1'b0;
	din[9] = #200000 1'b1;
end 
// din[ 8 ]
initial
begin
	din[8] = 1'b0;
	din[8] = #200000 1'b1;
	din[8] = #200000 1'b0;
	din[8] = #400000 1'b1;
end 
// din[ 7 ]
initial
begin
	din[7] = 1'b1;
	din[7] = #400000 1'b0;
	din[7] = #400000 1'b1;
end 
// din[ 6 ]
initial
begin
	din[6] = 1'b1;
	din[6] = #200000 1'b0;
	din[6] = #200000 1'b1;
end 
// din[ 5 ]
initial
begin
	din[5] = 1'b0;
	din[5] = #600000 1'b1;
end 
// din[ 4 ]
initial
begin
	din[4] = 1'b1;
	din[4] = #400000 1'b0;
	din[4] = #200000 1'b1;
end 
// din[ 3 ]
initial
begin
	din[3] = 1'b1;
	din[3] = #200000 1'b0;
	din[3] = #600000 1'b1;
end 
// din[ 2 ]
initial
begin
	din[2] = 1'b1;
	din[2] = #200000 1'b0;
	din[2] = #600000 1'b1;
end 
// din[ 1 ]
initial
begin
	din[1] = 1'b0;
	din[1] = #400000 1'b1;
end 
// din[ 0 ]
initial
begin
	din[0] = 1'b0;
	din[0] = #200000 1'b1;
	din[0] = #200000 1'b0;
	din[0] = #200000 1'b1;
	din[0] = #200000 1'b0;
end 
endmodule


// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2022 11:33:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ram
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ram_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] adr;
reg clk;
reg [31:0] treg_data;
reg we;
// wires                                               
wire [31:0] data;

// assign statements (if any)                          
assign data = treg_data;
ram i1 (
// port map - connection between master ports and signals/registers   
	.adr(adr),
	.clk(clk),
	.data(data),
	.we(we)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// we
initial
begin
	we = 1'b0;
	we = #50000 1'b1;
	we = #60000 1'b0;
	we = #90000 1'b1;
	we = #70000 1'b0;
	we = #70000 1'b1;
	we = #20000 1'b0;
	we = #170000 1'b1;
	we = #80000 1'b0;
end 
// adr[ 5 ]
initial
begin
	adr[5] = 1'b0;
	adr[5] = #280000 1'b1;
end 
// adr[ 4 ]
initial
begin
	adr[4] = 1'b0;
	adr[4] = #280000 1'b1;
end 
// adr[ 3 ]
initial
begin
	adr[3] = 1'b0;
end 
// adr[ 2 ]
initial
begin
	adr[2] = 1'b0;
end 
// adr[ 1 ]
initial
begin
	adr[1] = 1'b0;
	adr[1] = #280000 1'b1;
end 
// adr[ 0 ]
initial
begin
	adr[0] = 1'b0;
end 
// data[ 31 ]
initial
begin
	treg_data[31] = 1'b0;
	treg_data[31] = #10000 1'bZ;
	treg_data[31] = #40000 1'b0;
	treg_data[31] = #120000 1'bZ;
	treg_data[31] = #160000 1'b0;
end 
// data[ 30 ]
initial
begin
	treg_data[30] = 1'b0;
	treg_data[30] = #10000 1'bZ;
	treg_data[30] = #40000 1'b0;
	treg_data[30] = #120000 1'bZ;
	treg_data[30] = #160000 1'b0;
end 
// data[ 29 ]
initial
begin
	treg_data[29] = 1'b0;
	treg_data[29] = #10000 1'bZ;
	treg_data[29] = #40000 1'b0;
	treg_data[29] = #120000 1'bZ;
	treg_data[29] = #160000 1'b0;
end 
// data[ 28 ]
initial
begin
	treg_data[28] = 1'b0;
	treg_data[28] = #10000 1'bZ;
	treg_data[28] = #40000 1'b0;
	treg_data[28] = #120000 1'bZ;
	treg_data[28] = #160000 1'b0;
end 
// data[ 27 ]
initial
begin
	treg_data[27] = 1'b0;
	treg_data[27] = #10000 1'bZ;
	treg_data[27] = #40000 1'b0;
	treg_data[27] = #120000 1'bZ;
	treg_data[27] = #160000 1'b0;
end 
// data[ 26 ]
initial
begin
	treg_data[26] = 1'b0;
	treg_data[26] = #10000 1'bZ;
	treg_data[26] = #40000 1'b0;
	treg_data[26] = #120000 1'bZ;
	treg_data[26] = #160000 1'b0;
end 
// data[ 25 ]
initial
begin
	treg_data[25] = 1'b0;
	treg_data[25] = #10000 1'bZ;
	treg_data[25] = #40000 1'b0;
	treg_data[25] = #120000 1'bZ;
	treg_data[25] = #160000 1'b0;
end 
// data[ 24 ]
initial
begin
	treg_data[24] = 1'b0;
	treg_data[24] = #10000 1'bZ;
	treg_data[24] = #40000 1'b0;
	treg_data[24] = #120000 1'bZ;
	treg_data[24] = #160000 1'b0;
end 
// data[ 23 ]
initial
begin
	treg_data[23] = 1'b0;
	treg_data[23] = #10000 1'bZ;
	treg_data[23] = #40000 1'b0;
	treg_data[23] = #120000 1'bZ;
	treg_data[23] = #160000 1'b0;
end 
// data[ 22 ]
initial
begin
	treg_data[22] = 1'b0;
	treg_data[22] = #10000 1'bZ;
	treg_data[22] = #40000 1'b0;
	treg_data[22] = #120000 1'bZ;
	treg_data[22] = #160000 1'b0;
end 
// data[ 21 ]
initial
begin
	treg_data[21] = 1'b0;
	treg_data[21] = #10000 1'bZ;
	treg_data[21] = #40000 1'b0;
	treg_data[21] = #120000 1'bZ;
	treg_data[21] = #160000 1'b0;
end 
// data[ 20 ]
initial
begin
	treg_data[20] = 1'b0;
	treg_data[20] = #10000 1'bZ;
	treg_data[20] = #40000 1'b0;
	treg_data[20] = #120000 1'bZ;
	treg_data[20] = #160000 1'b0;
end 
// data[ 19 ]
initial
begin
	treg_data[19] = 1'b0;
	treg_data[19] = #10000 1'bZ;
	treg_data[19] = #40000 1'b0;
	treg_data[19] = #120000 1'bZ;
	treg_data[19] = #160000 1'b0;
end 
// data[ 18 ]
initial
begin
	treg_data[18] = 1'b0;
	treg_data[18] = #10000 1'bZ;
	treg_data[18] = #40000 1'b0;
	treg_data[18] = #120000 1'bZ;
	treg_data[18] = #160000 1'b0;
end 
// data[ 17 ]
initial
begin
	treg_data[17] = 1'b0;
	treg_data[17] = #10000 1'bZ;
	treg_data[17] = #40000 1'b0;
	treg_data[17] = #120000 1'bZ;
	treg_data[17] = #160000 1'b0;
end 
// data[ 16 ]
initial
begin
	treg_data[16] = 1'b0;
	treg_data[16] = #10000 1'bZ;
	treg_data[16] = #40000 1'b0;
	treg_data[16] = #120000 1'bZ;
	treg_data[16] = #160000 1'b0;
end 
// data[ 15 ]
initial
begin
	treg_data[15] = 1'b0;
	treg_data[15] = #10000 1'bZ;
	treg_data[15] = #40000 1'b0;
	treg_data[15] = #120000 1'bZ;
	treg_data[15] = #160000 1'b0;
end 
// data[ 14 ]
initial
begin
	treg_data[14] = 1'b0;
	treg_data[14] = #10000 1'bZ;
	treg_data[14] = #40000 1'b0;
	treg_data[14] = #120000 1'bZ;
	treg_data[14] = #160000 1'b0;
end 
// data[ 13 ]
initial
begin
	treg_data[13] = 1'b0;
	treg_data[13] = #10000 1'bZ;
	treg_data[13] = #40000 1'b0;
	treg_data[13] = #120000 1'bZ;
	treg_data[13] = #160000 1'b0;
end 
// data[ 12 ]
initial
begin
	treg_data[12] = 1'b0;
	treg_data[12] = #10000 1'bZ;
	treg_data[12] = #40000 1'b0;
	treg_data[12] = #120000 1'bZ;
	treg_data[12] = #160000 1'b0;
end 
// data[ 11 ]
initial
begin
	treg_data[11] = 1'b0;
	treg_data[11] = #10000 1'bZ;
	treg_data[11] = #40000 1'b0;
	treg_data[11] = #120000 1'bZ;
	treg_data[11] = #160000 1'b0;
end 
// data[ 10 ]
initial
begin
	treg_data[10] = 1'b0;
	treg_data[10] = #10000 1'bZ;
	treg_data[10] = #40000 1'b0;
	treg_data[10] = #120000 1'bZ;
	treg_data[10] = #160000 1'b0;
end 
// data[ 9 ]
initial
begin
	treg_data[9] = 1'b0;
	treg_data[9] = #10000 1'bZ;
	treg_data[9] = #40000 1'b0;
	treg_data[9] = #120000 1'bZ;
	treg_data[9] = #160000 1'b0;
end 
// data[ 8 ]
initial
begin
	treg_data[8] = 1'b0;
	treg_data[8] = #10000 1'bZ;
	treg_data[8] = #40000 1'b0;
	treg_data[8] = #120000 1'bZ;
	treg_data[8] = #160000 1'b0;
end 
// data[ 7 ]
initial
begin
	treg_data[7] = 1'b0;
	treg_data[7] = #10000 1'bZ;
	treg_data[7] = #40000 1'b0;
	treg_data[7] = #120000 1'bZ;
	treg_data[7] = #160000 1'b0;
end 
// data[ 6 ]
initial
begin
	treg_data[6] = 1'b0;
	treg_data[6] = #10000 1'bZ;
	treg_data[6] = #40000 1'b0;
	treg_data[6] = #120000 1'bZ;
	treg_data[6] = #160000 1'b0;
end 
// data[ 5 ]
initial
begin
	treg_data[5] = 1'b0;
	treg_data[5] = #10000 1'bZ;
	treg_data[5] = #40000 1'b0;
	treg_data[5] = #120000 1'bZ;
	treg_data[5] = #160000 1'b0;
	treg_data[5] = #40000 1'b1;
	treg_data[5] = #80000 1'b0;
end 
// data[ 4 ]
initial
begin
	treg_data[4] = 1'b1;
	treg_data[4] = #10000 1'bZ;
	treg_data[4] = #40000 1'b1;
	treg_data[4] = #120000 1'bZ;
	treg_data[4] = #160000 1'b1;
	treg_data[4] = #40000 1'b0;
	treg_data[4] = #80000 1'b1;
end 
// data[ 3 ]
initial
begin
	treg_data[3] = 1'b0;
	treg_data[3] = #10000 1'bZ;
	treg_data[3] = #40000 1'b0;
	treg_data[3] = #10000 1'b1;
	treg_data[3] = #90000 1'b0;
	treg_data[3] = #20000 1'bZ;
	treg_data[3] = #160000 1'b0;
	treg_data[3] = #40000 1'b1;
	treg_data[3] = #80000 1'b0;
end 
// data[ 2 ]
initial
begin
	treg_data[2] = 1'b1;
	treg_data[2] = #10000 1'bZ;
	treg_data[2] = #40000 1'b1;
	treg_data[2] = #120000 1'bZ;
	treg_data[2] = #160000 1'b1;
	treg_data[2] = #40000 1'b0;
	treg_data[2] = #80000 1'b1;
end 
// data[ 1 ]
initial
begin
	treg_data[1] = 1'b0;
	treg_data[1] = #10000 1'bZ;
	treg_data[1] = #40000 1'b0;
	treg_data[1] = #10000 1'b1;
	treg_data[1] = #90000 1'b0;
	treg_data[1] = #20000 1'bZ;
	treg_data[1] = #160000 1'b0;
end 
// data[ 0 ]
initial
begin
	treg_data[0] = 1'b0;
	treg_data[0] = #10000 1'bZ;
	treg_data[0] = #40000 1'b0;
	treg_data[0] = #120000 1'bZ;
	treg_data[0] = #160000 1'b0;
end 
endmodule

